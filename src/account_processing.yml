AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ADF CloudFormation Stack pertaing to account processing / OU management.
Parameters:
  OrganizationID:
    Type: String
  ADFVersion:
    Type: String
  LambdaLayer:
    Type: String
  CrossAccountAccessRoleName:
    Type: String 

Resources:
  AccountProcessingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  AccountProcessingLambdaRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Policy to allow the account file processing Lambda to perform actions"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
              - "lambda:GetLayerVersion"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "organizations:DescribeOrganizationalUnit"
              - "organizations:ListParents"
              - "organizations:ListAccounts"              
              - "organizations:DescribeOrganization"
              - "organizations:DescribeAccount"
              - "states:StartExecution"
              - "xray:Put*"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !GetAtt ADFAccountBucket.Arn
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource:
              !Join
                - ''
                - - !GetAtt ADFAccountBucket.Arn
                  - '/*'
      Roles:
        - !Ref AccountProcessingLambdaRole
  ADFAccountAccessRolePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Additional policy that allows a lambda to assume the cross account access role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"               
            Resource: !Sub "arn:aws:iam::*:role/${CrossAccountAccessRoleName}" 
      Roles:
        - !Ref AccountProcessingLambdaRole   
        - !Ref GetAccountRegionsFunctionRole    
        - !Ref DeleteDefaultVPCFunctionRole   
        - !Ref AccountAliasConfigFunctionRole
  ADFAccountProcessingLambdaBasePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Base policy for all ADF account processing lambdas"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"       
              - "xray:PutTelemetryRecords"     
              - "xray:PutTraceSegments"     
            Resource: "*" 
      Roles:
        - !Ref AccountProcessingLambdaRole   
        - !Ref GetAccountRegionsFunctionRole    
        - !Ref DeleteDefaultVPCFunctionRole    
        - !Ref AccountAliasConfigFunctionRole  
        - !Ref AccountTagConfigFunctionRole 
        - !Ref AccountOUConfigFunctionRole    
        - !Ref CreateAccountFunctionRole
        - !Ref RegisterAccountForSupportFunctionRole

  StateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-state-machine-role-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "xray:PutTelemetryRecords"     
                  - "xray:PutTraceSegments"  
                Resource: "*"                          
  AccountFileProcessingFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: process_account_files.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Account File Processing"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
          ACCOUNT_MANAGEMENT_STATEMACHINE_ARN: !Ref AccountManagementStateMachine
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: AccountFileProcessorFunction
      Role: !GetAtt AccountProcessingLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300        
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: ADFAccountBucket
            Events: s3:ObjectCreated:*
      Tracing: Active
  AccountAliasConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:CreateAcountAlias"
                Resource: "*"
                                          
  AccountAliasConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: configure_account_alias.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Account Alias Configuration"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName          
      FunctionName: AccountAliasConfigurationFunction
      Role: !GetAtt AccountAliasConfigFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300   
      Tracing: Active                     
  AccountTagConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:TagResource"
                Resource: "*"
  AccountTagConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: configure_account_tags.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Account OU Configuration"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
      FunctionName: AccountTagConfigurationFunction
      Role: !GetAtt AccountTagConfigFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300          
      Tracing: Active                                                    
  AccountOUConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: configure_account_ou.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Account OU Configuration"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
      FunctionName: AccountOUConfigurationFunction
      Role: !GetAtt AccountOUConfigFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300 
      Tracing: Active            
  AccountOUConfigFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:*"
                Resource: "*"                          
  GetAccountRegionsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: get_account_regions.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Get Default Regions for an account"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName          
      FunctionName: GetAccountRegionsFunction
      Role: !GetAtt GetAccountRegionsFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300 
      Tracing: Active            
  GetAccountRegionsFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"             
  DeleteDefaultVPCFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: delete_default_vpc.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Delete the default vpc for a region"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName
      FunctionName: DeleteDefaultVPCFunction
      Role: !GetAtt DeleteDefaultVPCFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300 
      Tracing: Active            
  DeleteDefaultVPCFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"            
  CreateAccountFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: create_account.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Create an account"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
          ADF_ROLE_NAME: !Ref CrossAccountAccessRoleName          
      FunctionName: CreateAccountFunction
      Role: !GetAtt CreateAccountFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300 
      Tracing: Active            
  CreateAccountFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "organizations:CreateAccount"
                  - "organizations:DescribeCreateAccountStatus"
                Resource: "*" 
  RegisterAccountForSupportFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Architectures:
        - arm64
      Handler: register_account_for_support.lambda_handler
      CodeUri: lambda_codebase/account_processing
      Layers:
          - !Ref LambdaLayer
      Description: "ADF Lambda Function - Registers an account for enterprise support"
      Environment:
        Variables:
          MASTER_ACCOUNT_ID: !Ref AWS::AccountId
          ORGANIZATION_ID: !Ref OrganizationID
          ADF_VERSION: !Ref ADFVersion
          ADF_LOG_LEVEL: INFO
      FunctionName: RegisterAccountForSupportFunction
      Role: !GetAtt RegisterAccountForSupportFunctionRole.Arn
      Runtime: python3.8
      Timeout: 300 
      Tracing: Active            
  RegisterAccountForSupportFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "adf-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "support:DescribeSeverityLevels"
                  - "support:CreateCase"             
                Resource: "*"                                                           
  ADFAccountBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true  
  AccountManagementStateMachine:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        DefinitionString: !Sub |-
              {
                "Comment": "Create account?",
                "StartAt": "CreateAccountChoice",
                "States": {
                  "CreateAccountChoice": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.needs_created",
                        "BooleanEquals": true,
                        "Comment": "Create Account",
                        "Next": "CreateAccount"
                      }
                    ],
                    "Default": "ConfigureAccountAlias"
                  },
                  "ConfigureAccountAlias": {
                    "Type": "Task",
                    "Resource": "${AccountAliasConfigFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "ConfigureAccountTags"
                  },
                  "CreateAccount": {
                    "Type": "Task",
                    "Resource": "${CreateAccountFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "WaitFor10Seconds"
                  },
                  "WaitFor10Seconds": {
                        "Type": "Wait",
                        "Seconds": 10,
                        "Next": "ConfigureAccountSupport"
                  }, 
                  "ConfigureAccountSupport": {
                    "Type": "Task",
                    "Resource": "${RegisterAccountForSupportFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "ConfigureAccountAlias"
                  },                                                       
                  "ConfigureAccountTags": {
                    "Type": "Task",
                    "Resource": "${AccountTagConfigFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "ConfigureAccountOU"
                  },  
                  "ConfigureAccountOU": {
                    "Type": "Task",
                    "Resource": "${AccountOUConfigFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "DeleteDefaultVPCChoice"
                  },
                  "DeleteDefaultVPCChoice": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.delete_default_vpc",
                        "BooleanEquals": true,
                        "Next": "GetAccountDefaultRegionsFunction"
                      }
                    ],
                    "Default": "Success"
                  },                    
                  "GetAccountDefaultRegionsFunction": {
                    "Type": "Task",
                    "Resource": "${GetAccountRegionsFunction.Arn}",
                    "Retry": [{
                        "ErrorEquals": ["States.TaskFailed"],
                        "IntervalSeconds": 3,
                        "BackoffRate": 1.5,
                        "MaxAttempts": 30
                    }],
                    "Next": "DeleteDefaultVPCMap"
                  },
                  "DeleteDefaultVPCMap": {
                    "Type": "Map",
                    "Next": "Success",
                  "Iterator": {
                          "StartAt": "DeleteDefaultVPC",
                          "States": {
                            "DeleteDefaultVPC": {
                              "Type": "Task",
                              "Resource": "${DeleteDefaultVPCFunction.Arn}",
                              "OutputPath": "$.Payload",
                              "Parameters": {
                                "Payload.$": "$"
                              },
                              "Retry": [
                                {
                                  "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException"
                                  ],
                                  "IntervalSeconds": 2,
                                  "MaxAttempts": 6,
                                  "BackoffRate": 2
                                }
                              ],
                              "End": true
                            }
                          }
                        },
                        "ItemsPath": "$.default_regions",
                        "MaxConcurrency": 20,
                        "Parameters": {
                          "region.$": "$$.Map.Item.Value",
                          "account.$": "$.Id"
                        },
                        "ResultPath": null                 
                  },                                                                     
                  "Success": {
                    "Type": "Succeed"
                  }
                }
              }
        RoleArn: !GetAtt StateMachineExecutionRole.Arn     
        TracingConfiguration:
          Enabled: True   
Outputs:
  Bucket:
    Value: !Ref ADFAccountBucket